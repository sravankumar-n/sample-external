//Declarative pipeline


node('master') {

}

pipeline {
    environment { 
        registry = "sharavankumar1/demotest" 
        registryCredential = 'dockerhub_id'
        dockerImage = '' 
        sonarscanner = tool "sonarqube"
    }
    agent any
    tools {nodejs "Nodejs"}
  stages{

   stage("Code Checkout")
  {

  steps{
    script{
        echo "${env.WORKSPACE}"
        cleanWs()
        git branch: 'main', url: 'https://github.com/sravankumar1-n/sample-external.git'
    }
  }
  }
  
  stage('SonarQube analysis') {
            steps {
                withSonarQubeEnv('sonarqube-server') {
    sh '$sonarscanner/bin/sonar-scanner -Dsonar.projectKey=cicd -Dsonar.sources=. -Dsonar.host.url=http://localhost:9000 -Dsonar.login=0557e1b999d8144938e65f223a739b465eec74c8'
    
        }
    }
 }
 
 /*       
stage("Quality Gate") {
  steps {
    timeout(time: 1, unit: 'HOURS') {
        waitForQualityGate abortPipeline: true
    }
  }
}
*/
  
  stage("Unit testing")
  { 
   steps{
      echo "unit testing"
//    sh 'cd test/ | npm install'
//    sh 'cd test/ | npm test'
     
}
  }   


  stage("Docker build")
  { 
  steps{ 
    script{
         echo "this stage to build/tag docker iamge"
               dockerImage = docker.build registry + ":$BUILD_NUMBER" 
  
     }
    }
  }
  
  stage('Docker push') { 
            steps { 
                script { 
                    docker.withRegistry( '', registryCredential ) { 
                        dockerImage.push() 
                    }
                } 
            }
        } 
        
stage("Kubernetes Config")
 {
  steps{
    script{
	
	  echo "To call kubernetes deployment files"
	  sh 'gcloud config set project titanium-cacao-3151151'
	  sh 'gcloud config set account 10870969251451-compute@developer.gserviceaccount.com'
	  sh 'gcloud auth activate-service-account --key-file=/home/ubuntu/gcpcliuser.json'
	  sh 'gcloud container clusters get-credentials my-app-cluster --zone us-central1-a --project titanium-cacao-3151151'

       }
        
  }
    }
	
stage("Kubernetes Deployment")
 {

  steps{
    script{
	
	  echo "To call kubernetes deployment files"
//	  sh 'kubectl version'
	  sh 'kubectl apply -f namespace.yaml'
	  sh 'kubectl apply -f externalapp-deployment.yaml'
	  sh 'kubectl apply -f externalapp-service.yaml'
	  sh 'kubectl set image deployment/externalapp-deployment external-containers=sharavankumar1/demotest:$BUILD_NUMBER -n dev --record'
	  sh 'kubectl get service -n dev'

       }
        
  }
    }
  
 
    
  }
   }
